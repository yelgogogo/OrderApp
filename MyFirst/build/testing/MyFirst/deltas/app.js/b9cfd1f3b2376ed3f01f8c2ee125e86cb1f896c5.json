["function _8982a6f0a6ef7440335e75e0bc06f9eb8f7b5433(){};",176303,37,92,1048484,1048576,830196,"Tommy Maintz\n *\n * This class generates UUID's according to RFC 4122. This class has a default id property.\n * This means that a single instance is shared unless the id property is overridden. Thus,\n * two {@link Ext.data.Model} instances configured like the following share one generator",1582194,42,"X",1662304,78,"identifier: 'uuid",1693999,48,"MyApp.data.MyModelY",1662304,78,"identifier: 'uuid",1693999,32,"This allows all models using this class to share a commonly configured instance.\n *\n * # Using Version 1 (\"Sequential\") UUID's\n *\n * If a server can provide a proper timestamp and a \"cryptographic quality random number\"\n * (as described in RFC 4122), the shared instance can be configured as follows:\n *\n *     Ext.data.identifier.Uuid.Global.reconfigure({\n *         version: 1,\n *         clockSeq: clock, // 14 random bits\n *         salt: salt,      // 48 secure random bits (the Node field)\n *         timestamp: ts    // timestamp per Section 4.1.4\n *     });\n *\n *     // or these values can be split into 32-bit chunks:\n *\n *     Ext.data.identifier.Uuid.Global.reconfigure({\n *         version: 1,\n *         clockSeq: clock,\n *         salt: { lo: saltLow32, hi: saltHigh32 },\n *         timestamp: { lo: timestampLow32, hi: timestamptHigh32 }\n *     });\n *\n * This approach improves the generator's uniqueness by providing a valid timestamp and\n * higher quality random data. Version 1 UUID's should not be used unless this information\n * can be provided by a server and care should be taken to avoid caching of this data.\n *\n * See [http://www.ietf.org/rfc/rfc4122.txt](http://www.ietf.org/rfc/rfc4122.txt) for details.",1582487,38,"Uuid', {\r\n    extend: Ext.data.identifier.Simple,\r\n    alias: 'data.identifier.uuid',\r\n    /**\n     * Provides a way to determine if this identifier supports creating unique IDs. Proxies lik",1517530,36,"}\n     * need the identifier to create unique IDs and will check this property.\n     * @property isUnique",1698499,53,"Unique",2384576,47,"The id for this generator instance. By default all model instances share the same\n         * UUID generator instance. By specifying an id other then 'uuid', a unique generator instance\n         * will be created for",1628314,33,914704,40,"property {Number/Object} salt\n         * When created, this value is a 48-bit number. For computation, this value is split\n         * into 32-bit parts and stored in an object with `hi` and `lo` properties.\n         */\r\n        sal",1463392,34,"property {Number/Object} timestamp\n         * When created, this value is a 60-bit number. For computation, this value is split\n         * into 32-bit parts and stored in an object with `hi` and `lo` properties.\n         */\r\n        timestamp",1223440,46,"version\n         * The Version of UUID. Supported",837238,35," * 1 : Time-based, \"sequential\" UUID.\n         *  * 4 : Pseudo-random UUID",2189072,36,"is 4.\n         */\r\n        version: 4",914852,51,"id =",571772,36,"Ext.data.identifier.Uuid.Global",420015,46,1925776,35,1921024,55,"    me.parts = [];\r\n        me.init();\r\n    },\r\n    /**\n     * Reconfigures this generator given new config properties.\n     */\r\n    reconfigure",1356992,35,"setConfig(config);\r\n        this.init(",685213,35,534464,41,"parts = me.parts,\r\n            version = me.getVersion(),\r\n            salt = me.getSalt(),\r\n            time = me.getTimestamp();\r\n        /*\n           The magic decoder ring (derived from RFC 4122 Section 4.2.2):\n\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |                          time_low                             |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |           time_mid            |  ver  |        time_hi        |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |res|  clock_hi |   clock_low   |    salt 0   |M|     salt 1    |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           |                         salt (2-5)                            |\n           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n                     time_mid      clock_hi (low 6 bits)\n            time_low     | time_hi |clock_lo\n                |        |     |   || salt[0]\n                |        |     |   ||   | salt[1..5]\n                v        v     v   vv   v v\n                0badf00d-aced-1def-b123-dfad0badbeef\n                              ^    ^     ^",366674,33,"   |     multicast (low bit)\n",47312,35,"|\n",47312,32,"reserved (upper 2 bits)\n        */\r\n        parts[0] = me.toHex(time.lo, 8);\r\n        parts[1] = me.toHex(time.hi & 65535, 4);\r\n        parts[2] = me.toHex(((time.hi >>> 16) & 4095) | (version << 12), 4);\r\n        parts[3] = me.toHex(128 | ((me.clockSeq >>> 8) & 63), 2) + me.toHex(me.clockSeq & 255, 2);\r\n        parts[4] = me.toHex(salt.hi, 4) + me.toHex(salt.lo, 8);\r\n        if (version == 4) {\r\n            me.init();\r\n        } else // just regenerate all the random values...\r\n        {\r\n            // sequentially increment the timestamp...\r\n            ++time.lo;\r\n            if (time.lo >= me.twoPow32) {\r\n                // if (overflow)\r\n                time.lo = 0;\r\n                ++time.h",1062176,34,"    return parts.join('-')",1358188,62,"init",1833072,52,"salt = me.getSalt(),\r\n            time = me.getTimestamp();\r\n        if (me.getVersion() == 4) {\r\n            // See RFC 4122 (Secion 4.4)\r\n            //   o  If the state was unavailable (e.g., non-existent or corrupted),\r\n            //      or the saved node ID is different than the current node ID,\r\n            //      generate a random clock sequence value.\r\n            me.clockSeq = me.rand(0, me.twoPow14 - 1);\r\n            if (!salt) {\r\n                salt = {};\r\n                me.setSalt(salt",368176,35,"!time) {\r\n                time = {};\r\n                me.setTimestamp(ti",294719,33,"// See RFC 4122 (Secion 4.4)\r\n            salt.lo = me.rand(0, me.twoPow32 - 1);\r\n            salt.hi = me.rand(0, me.twoPow16 - 1);\r\n            time.lo = me.rand(0, me.twoPow32 - 1);\r\n            time.hi = me.rand(0, me.twoPow28 - 1",1119808,34,"// this is run only once per-instance\r\n            me.setSalt(me.split(me.getSalt()));\r\n            me.setTimestamp(me.split(me.getTimestamp()));\r\n            // Set multicast bit: \"the least significant bit of the first octet of the\r\n            // node ID\" (nodeId = salt for this implementation):\r\n            me.getSalt().hi |= 256",345408,37,"Some private values used in methods on this clas",1907598,32,"twoPow14: Math.pow(2, 14),\r\n    twoPow16: Math.pow(2, 16),\r\n    twoPow28: Math.pow(2, 28),\r\n    twoPow32: Math.pow(2, 32),\r\n    /**\n     * Converts a value into a hexadecimal value. Also allows for a maximum length\n     * of the returne",1831152,32,"value\n",235847,35,"* @private\n     */\r\n    toHex: function(value, length) {\r\n        var ret = value.toString(16);\r\n        if (ret.length > length) {\r\n            ret = ret.substring(ret.length - length);\r\n        }\r\n        // right-most digits\r\n        else if (ret.length < length) {\r\n            ret = Ext.String.leftPad(ret, length, '0'",50345,32,"t",305978,36,"a random value with between a low and high.\n     * @param {Number} low\n     * @param {Number} high\n     * @private\n     */\r\n    rand: function(low, high) {\r\n        var v = Math.random() * (high - low + 1);\r\n        return Math.floor(v) + low;\r\n    },\r\n    /**\n     * Splits a number into a low and high value.\n     * @param {Number} bignum\n     * @private\n     */\r\n    split: function(bignum) {\r\n        if (typeof (bignum) == 'number') {\r\n            var hi = Math.floor(bignum / this.twoPow32);",987856,40,"lo: Math.floor(bignum - hi * this.twoPow32),\r\n                hi: hi",553776,44,"bignum",1090152,36,"Global = new this({\r\n        id: 'uuid'\r\n    });",1350720,41,1878789,209316,2088105,403778,",",1701536,44,"uuid',\r\n            isUnique",880285,33,2491899,1955,2496397,204,2495280,41,2508445,32,2501728,37,2508544,36,2493951,309,2508445,32,2503440,166,2497886,94,2497741,32,2506080,63,2497980,37,2495984,94,"IsPack",2496184,50,2495280,41,2494776,59,2500128,42,2504847,55,2594814,35,2494870,135,2495086,1230,2496701,141,2502414,12142,"console.log(",2462958,32,2514560,38,"console.log(user",2609998,32,2514582,55,2568190,70,2463362,196,2514821,101478,"// console.log(r);        ",2616314,1223]